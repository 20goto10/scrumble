<?xml version="1.0" encoding="UTF-8" ?>
<Module>
  <ModulePrefs title="Scrumble" width="200" height="200">
    <Require feature="rpc"/>
    <Require feature="views"/>
  </ModulePrefs>
  <Content type="html">
    <![CDATA[
<html>
  <style type="text/css">
   .button {
        border-radius: 3px;
        -moz-border-radius: 3px; background:
        -webkit-gradient(linear, left top, left bottom, from(#fff), to(#ddd));
        background: -moz-linear-gradient(top, #fff, #99f);
        border: 1px solid #bbb;
        width:32px;
        height:32px;
        background-image:url('http://skullbasher.com/scrumble/scrumble_32x32.png');
        background-repeat:no-repeat;
        background-position:fixed center
      }
   .button:active {
        background: -webkit-gradient(linear, left top, left bottom, from(#aaa), to(#33c));
        background: -moz-linear-gradient(bottom, #ddf, #99a);
      }

   #scrumble_controls { width:100%;margin:10px; }
   #scrumble_controls ul { width:100%; list-style-type:none; list-style-position:none; }
   #scrumble_controls ul li { line-height: 2em; position:relative; left:-40px; }
   #scrumble_order { width:90%;height:2em;color:#f00; }

   #img_thumb { width: 100px; }
   #ajax_workaround { display: none }
 </style>
 <body style='background-color:transparent'>
    <script src="//plus.google.com/hangouts/_/api/v1/hangout.js"></script>

    <div id='scrumble_controls'>
      <ul id='scrumble_button_container'>
        <li><button id='scrumble_button' class='button' onclick='scrumble_alarm()'> </button> Sound the Scrumble Alarm</li>
        <li><button id='scrumble_button' class='button' onclick='shuffle_list_action()'> </button> Randomize Scrum Order</li>
        <li><button id='hipchat_msg' class='button' onclick='send_to_hipchat()'> </button> Send Roster to Hipchat</li>
        <li><input type='text' id='hipchat_key' onchange='preserve_cookies()' /> Hipchat Key</li>
        <li><input type='text' id='hipchat_room' onchange='preserve_cookies()' /> Hipchat Room</li>
        <li><input type='text' id='hipchat_alarm_image' onchange='preserve_cookies()' value='' onchange='image_thumb()' /> Alarm URL</li>
        <li><img id='img_thumb' src='' /> (thumb)</li>
      </ul>
    </div>
      <hr />
      PARTICIPANTS: <br />
      <pre id='scrumble_participants'></pre>
      <hr />
      SCRUM ORDER: <br />
      <pre id='scrumble_order'></pre>
      <iframe id='ajax_workaround' >hello</iframe>

    <script type="text/javascript" src="//www.google.com/jsapi"></script>
    <script type="text/javascript">google.load("jquery", "1.3.2");</script>
    <script src="//plus.google.com/hangouts/_/api/v1/hangout.js"></script>
    <script type="text/javascript">
    /*!
 * jQuery Cookie Plugin v1.4.0
 * https://github.com/carhartl/jquery-cookie
 *
 * Copyright 2013 Klaus Hartl
 * Released under the MIT license
 */
(function (factory) {
	if (typeof define === 'function' && define.amd) {
		// AMD. Register as anonymous module.
		define(['jquery'], factory);
	} else {
		// Browser globals.
		factory(jQuery);
	}
}(function ($) {

	var pluses = /\+/g;

	function encode(s) {
		return config.raw ? s : encodeURIComponent(s);
	}

	function decode(s) {
		return config.raw ? s : decodeURIComponent(s);
	}

	function stringifyCookieValue(value) {
		return encode(config.json ? JSON.stringify(value) : String(value));
	}

	function parseCookieValue(s) {
		if (s.indexOf('"') === 0) {
			// This is a quoted cookie as according to RFC2068, unescape...
			s = s.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, '\\');
		}

		try {
			// Replace server-side written pluses with spaces.
			// If we can't decode the cookie, ignore it, it's unusable.
			// If we can't parse the cookie, ignore it, it's unusable.
			s = decodeURIComponent(s.replace(pluses, ' '));
			return config.json ? JSON.parse(s) : s;
		} catch(e) {}
	}

	function read(s, converter) {
		var value = config.raw ? s : parseCookieValue(s);
		return $.isFunction(converter) ? converter(value) : value;
	}

	var config = $.cookie = function (key, value, options) {

		// Write

		if (value !== undefined && !$.isFunction(value)) {
			options = $.extend({}, config.defaults, options);

			if (typeof options.expires === 'number') {
				var days = options.expires, t = options.expires = new Date();
				t.setTime(+t + days * 864e+5);
			}

			return (document.cookie = [
				encode(key), '=', stringifyCookieValue(value),
				options.expires ? '; expires=' + options.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE
				options.path    ? '; path=' + options.path : '',
				options.domain  ? '; domain=' + options.domain : '',
				options.secure  ? '; secure' : ''
			].join(''));
		}

		// Read

		var result = key ? undefined : {};

		// To prevent the for loop in the first place assign an empty array
		// in case there are no cookies at all. Also prevents odd result when
		// calling $.cookie().
		var cookies = document.cookie ? document.cookie.split('; ') : [];

		for (var i = 0, l = cookies.length; i < l; i++) {
			var parts = cookies[i].split('=');
			var name = decode(parts.shift());
			var cookie = parts.join('=');

			if (key && key === name) {
				// If second argument (value) is a function it's a converter...
				result = read(cookie, value);
				break;
			}

			// Prevent storing a cookie that we couldn't decode.
			if (!key && (cookie = read(cookie)) !== undefined) {
				result[name] = cookie;
			}
		}

		return result;
	};

	config.defaults = {};

	$.removeCookie = function (key, options) {
		if ($.cookie(key) === undefined) {
			return false;
		}

		// Must not alter options, thus extending a fresh object...
		$.cookie(key, '', $.extend({}, options, { expires: -1 }));
		return !$.cookie(key);
	};

}));

        // SCRUMBLE 2.0

        var participants = [];
        var names = [];
        var scrum_order = [];
        var cookie_list = ['hipchat_key','hipchat_room','hipchat_alarm_image'];

        function preserve_cookies()
        {
          for (var i=0;i<cookie_list.length;i++)
            $.cookie(cookie_list[i], $('#' + cookie_list[i]).val(), { expires: 30, secure: true } );
        }

        function revive_cookies()
        {
           for (var i=0;i<cookie_list.length;i++)
              if ($.cookie(cookie_list[i]))
                 $('#' + cookie_list[i]).val($.cookie(cookie_list[i]));
        }

        function hipchat_ajax(message)
        {
           preserve_cookies();

           url = "https://api.hipchat.com/v1/rooms/message?format=json&auth_token=" + $('#hipchat_key').val() + "&room_id=" + $('#hipchat_room').val() + "&from=ScrumbleBot&message_format=html&notify=1&color=green&message=" + encodeURIComponent(message);
           $('#ajax_workaround').attr("src", url);
        }

        function scrumble_alarm() {
           hangout_url = gapi.hangout.getHangoutUrl();
           hipchat_ajax("<a href='" + hangout_url + "'>IT'S SCRUMBLE TIME!<br /><img src='" + $('#hipchat_alarm_image').val() + "' /></a>");
        }

        function image_thumb() {
          $('#img_thumb').attr("src", $('#hipchat_alarm_image').val());
        }

        function send_to_hipchat() {
          if (scrum_order.length != participants.length)
            shuffle_list_action();

          hipchat_ajax("SCRUM ORDER:<br />" + scrum_order.join("<br />"));
        }

        function shuffle(o){
            for(var j, x, i = o.length; i; j = Math.floor(Math.random() * i), x = o[--i], o[i] = o[j], o[j] = x);
            return o;
        }

        function update_participants()
        {
            participants = gapi.hangout.getParticipants();
            names = [];
            for (i = 0; i < participants.length; i++)
            {
                names[i] = participants[i].person.displayName;
            }
            $('#scrumble_participants').html(names.join("\n"));
        }

        function shuffle_list_action()
        {
            update_participants();
            scrum_order = shuffle(names);
            $('#scrumble_order').text(scrum_order.join("\n"));
        }

        gapi.hangout.onApiReady.add(function(eventObj) {
            update_participants();

            gapi.hangout.onParticipantsAdded.add(function (event) {
               update_participants();
            });

            revive_cookies();
            image_thumb();
        });

    </script>
  </body>
</html>
    ]]>
  </Content>
</Module>

